# 변수
"""
변수는 데이터를 담는 저장소
변수는 이름을 가진다.
"""

a = 1
print(a)

# 파이썬 변수 이름 만드는 규칙
"""
1. 영어(대소문자 구분), 숫자, 언더바(_)
2. 이름은 숫자로 시작할 수 없다.
3. 파이선의 키워드(문법속 단어) 등을 변수로 쓸 수 없다.
ex) 키워드 : if, else, for, in (x)
    a_if(o)


참고사항) 변수의 이름을 만들 때는 변수 속
데이터의 특징에 맞는 이름을 지어준다.

average = 100 << 학생들의 평균 점수
iMath = 100
fAverage = 98.6
"""
programming_la = "Python"
print(programming_la)


# 파이썬에서 주석문(설명) 만들기

"""
1. 주석문이 여러줄이면 따옴표 3개로 묶은 부분을
주석으로 인식한다.
2. 주석문이 한줄이면 샾문자로 시작한 줄을
주석으로 인식한다.
"""
number = 1.0
print(number)


# 숫자형 (10, 8, 16 진수 중심으로)
"""
1. 파이썬에서 기본 숫자표현은 10진수이다.
2. 숫자 표현을 8진수, 16진수로 표기하고 싶을 경우는
    - 8진수 숫자(0)소문자오(O)숫자 ex) 0o14
    - 16진수 숫자(0)소문자엑스(x)숫자 ex) 0x3f
"""

number = 1+2j

# 복소수의 실수 부분만 때어내기
"""
복소수를 저장한 변수이름.real
"""
print(number.real)

# 복소수의 허수 부분만 때어내기
"""
복소수를 저장한 변수이름.imag
"""
print(number.imag)

# 복소수의 켤레 복소수를 구하기
"""
복소수를 저장한 변수이름.conjugate()
"""
print(number.conjugate())

# 복소수의 절대값 구하기
"""
abs(복소수를 저장한 변수이름 or 복소수 값)
"""
print(abs(number))

# 파이썬에서 사칙연산
"""
+ - * /
특정한 기능을 가진 기호 = 연산자
"""
number1 = 1
number2 = 2
"""
number1 과 number2를 덧셈(+)하고
저장한다(=) result 변수에 
"""
result = number1 / number2

# 제곱을 구하는 연산자 **
result = number1 ** number2



# 나머지 구하는 연산자 %
"""
7 % 3 >> 나머지 1
참고) 나머지 연산을 실행하면 나머지는 나누는 값보다
항상 작다.
3으로 나누면 나머지의 값은 항상 0, 1, 2가 된다.
"""

# 나눗셈에서 소수부분을 버리는 // 연산자
print(10//3)


# 문자열

string = "hello python"
string2 = "123"
string3 = 123
string4 = 'hello python'

# 따옴표 혹은 쌍따옴표로 문자열 데이터를 만들 수 있다.
"""
참고) 숫자도 따옴표 혹은 쌍따옴표를 활용하면
숫자(Number)가 아니라 문자열 (String) 데이터로 인식한다.
"""

# 문자열에 따옴표 혹은 쌍따옴표를 넣어서 저장
"""
1. 따옴표와 쌍따옴표를 같이 활용하여 문자열에 표현한다.
2. 백슬래시를 사용하여 따옴표와 쌍따옴표를 문자열에 표현한다.
    문자열로 저장할 따옴표 혹은 쌍따옴표 앞에 백슬러시를 입력
"""
string5 = "korea's programming"
string6 = '그는 이렇게 말했다. "반갑습니다."' 
string7 = 'korea\'s programmin'
print(string7)


# 여러줄의 문자열 데이터를 저장하는 방법

"""
1. 이스케이프 문자를 활용한다.
이스케이프 문자(\n)는 문자열 안에서는 특수한 기능을 수행하기 위한
키워드 이다.
2. 여러줄의 문자열 데이터를 따옴표 혹은 쌍따옴표 3개로 묶어
개행을 입력할 수 있다. 개행은 줄 바꿈입니다.
"""

multi1 = "안녕하세요\t반갑습니다."
print(multi1)

multi2 = '''
안녕하세요
    감사해요~
    잘있어요~
'''
print(multi2)

# 문자열 더하기와 곱하기
"""
파이썬에서는 문자열을 더하기(이어 붙이기)와 곱하기
(횟수를 지정해 어이 붙이기)를 할 수 있다.
참고로 빼기, 나누기 없음, 숫자의 덧셈 곱셈과는 다른 연산
(연산하는 항이 숫자 혹은 문자에 따라 덧셈, 곱셈 기호가
다른 역할(기능)을 수행한다.)
"""

head = "오늘도 "
tail = "수고하셨습니다."
number = 10


"""
문자열 덧셈을 할때는 두 항(head, tail)이 모두
문자열 데이터 이여야 한다.

total = head + number >> TypeError 발생 (문자열 + 숫자)
문자열 곱셈을 할 때는 한 항은 문자열 데이터 다른 항은
숫자 데이터(양의 정수, 횟수)이어야 한다.
total = head * tail >> TypeError 발생 (문자열 + 문자열)
"""

print(head + tail)
print(tail * 3)
msg = """
KOREA
"""
print(msg * 30)

# 문자열 인덱스
"""
문자열 인덱스는 문자열 데이터에서
하나의 문자를 가르키는 주소 역할을 한다.

인덱스를 활용하려면(문자열에서 인덱스번호 글자를
추려 낼 수 있다)

문자열을 저장한 변수이름[인덱스 번호]
주의) 인덱스를 활용할 때 문자열의 인덱스 범위

(동해물과 백두산이, 0~8)에 맞는 숫자를 인덱스 번호로
입력해야 한다.
"""

korea = "동해물과 백두산이"
print(korea)
print(korea[-3])

# 문자열의 길이를 구하는 명령어
"""
len(문자열 혹은 문자열 변수)

>> 문자열의 길이(글자의 수)를 구하는 명령어
>>>> 마지막 인덱스 = 글자의 수 - 1
>>>> 인덱스의 범위 = 0 ~ (글자수 - 1)

인덱스 번호에 -(마이너스)가 붙으면 문자열의
가장 오른쪽(맨 끝) 부터 인덱스 번호를 계산한다.
인덱스 번호에서 -0은 0과 동일하다.
"""

print(len(korea))

# 문자열 슬라이싱
"""
문자열의 인덱스를 활용하여
문자열의 일부를 추려내는 방법
문자열변수[슬라이스를 시작하는 인덱스번호 : 마지막 인덱스번호]

시작 인덱스 번호 부터 시작하여 마지막 인덱스 번호 전까지
"""

han = "가나다라마바사"
print(han[2:5])


"""
인덱스가 왼쪽 부터 시작하면(0이면) 생략할 수 있다.
"""
print(han[0:3])
print(han[:3])


"""
끝나는 인덱스 번호를 생략하면 문자열의 마지막 글자까지
슬라이싱한다.
"""
print(han[4:])


a = "Fun programming"

print(a[4:10])
print(a[-11:-5])
print(a[4:-5])


# 문자열에서 특정 단어 수정하기(슬라이스 활용)


url = "www.naver.net"
"""
url[-3] = "c"
url[-2] = "o"
url[-1] = "m"
"""
new = url[:10]+"com"
print(new)

song = "동해물과 한라산이"
new = song[:5] + "백두" + song[-2:]
print(new)


# 문자열 포메팅
"""
문자열에서 일부 내용(부분)을 값에 따라
다르게 입력하여야 할 때 활용하는 문자열 생성 방법

문자열에서 입력할 값을 %d, %s으로 표시하여
값, 값이 저장된 변수(가)이 들어갈 부분을 표시한다.
문자열에 들어가는 값 혹은 변수는 여러개 들어갈 수 있다.

괄호로 들어가는 값 혹은 변수를 묶는다.
단, 데이터가 들어가는 순서(%d 순서),
자료형을 일치해주어야 한다. 
"""
won = 100
print("사과는 "+ str(won) + "원입니다.")

str1 = "I have %d apples" % 10
print(str1)



str4 = "지금 시간은 %d시 %d분 %s요일 입니다." % (8, 54, '화')
print(str4)

kor = 90
math = 100
eng = 80
total = kor+math+eng
avg = (kor+math+eng)/3
msg = "국어 : %d\n수학 : %d\n영어 : %d\n평균 : %.3f\n합계 : %d" % (kor, math, eng, avg, total)
print(msg)

# 문자열 포메팅에서 정렬 변환 하기
"""
문자열 포메팅에서 자릿수를 변환하여 출력하거나
공백을 주어 정렬하면, 더 보기좋게 데이터를 표시할 수 있다.

소숫점 자리를 표시하려면 문자열 포맷 문자(%f)앞에
(공백 크기).(소숫점자리)를 입력한다.

숫자만 입력하면 오른쪽 정렬이고,
숫자 앞에 마이너스(-) 왼쪽 정렬 입니다.

정수를 표현 할 때(20를 3자리로 020으로 표현)
앞에 0으로 비어있는 자리를 표시하고 싶다면
문자열 포맷문자(%d)앞에 0(표현할 자릿수, 3)을 입력해준다.

math = 60
str7 = "%03d점입니다." % math
결과 : 060점입니다. >> 100의 자리에 0이 들어간다.

"""

math = 60
str7 = "%-10d점입니다." % math
print(str7)

math = 60
str7 = "%03d점입니다." % math
print(str7)

print("%-15s%-15d%-15s" % ('seoul', 10312545, '+91375'))
print("%-15s%-15d%-15s" % ('pusan', 3567910, '+5868'))
print("%-15s%-15d%-15s" % ('Incheon', 2758296, '64288'))


# 문자열의 문자 갯수
"""
count('문자') 명령은 특정 문자의 갯수를 구한다.
참고) 문자열 안의 속한 문자들의 갯수는 len(변수 혹은 문자열)
로 구한다.
"""

# 문자열에서 특정 문자를 찾는 find(), index()
"""
문자열에서 특정 문자를 찾는 명령어는 변수.find('특정문자')
특정 문자가 있는 인덱스를 알려준다.

find()는 특정 문자가 없다면 -1을 알려준다.
index()는 특정 문자가 없다면 에러를 발생시킨다.
"""
msg = "KOREA"
print(msg.find('C'))
#print(msg.index('C'))

# 문자 사이에 문자 넣기 join()

a = '/'
print(a.join("월화수목금토일"))

# 대소문자 변환 

a = "KoReA"
print(a.upper())

a = "kOReA"
print(a.lower())

# 공백지우기


str1 = "대한민국"
str2 = "  대한  민국 "

print(str2.lstrip())
print(str2.rstrip())
print(str2.strip())

# 치환하기 replace()

a = "동해물과 백두산이 백두"
print(a.replace("백두", "한라"))

print(str2.replace("  ", ""))

# 문자열을 나누는 Split()
"""
Split 명령어로 문자열을 나누면 조각이 리스트로 만들어져
표시된다. 각 조각의 데이터를 가져오려면
중괄호([]) 안에 인덱스를 활용하여 가져온다.
"""

day = "2016-05-16-월요일"
day_list = day.split('-')

print(day_list)

print(day_list[0])
print(day_list[1])
print(day_list[2])

# 키보드의 입력을 받는 명령어 input()
"""
키보드의 입력을 받을 수 있는 input() 함수
(함수 = 특정 기능을 하기 위한 명령어의 집합)
결과(리턴) : 입력 받은 내용을 메모리에 저장

메모리에 있는 값을 변수에 저장하여 활용하자!

변수 = input()
"""
#user_input = input()

#print(user_input)
"""
1(문자) >> 1(숫자)
korea(문자) >> ??(숫자)

문자열을 숫자로 형변환 >> int(변수 혹은 값)
숫자를 문자열로 형변환 >> str(변수 혹은 값)
"""

#user_input = int(input())

# 리스트 만들기
"""
리스트는 문자열, 숫자, 참/거짓, 리스트 등
여러가지 자료를 모아놓은 자료 구조이다.

리스트 안의 요소들을 중괄호([])로 묶어 표현한다.
리스트 안의 요소들은 인덱스를 활용하여 개별적으로 가져올 수 있다.

슬라이스를 활용하여 리스트의 인덱스 범위에 있는 요소들을
추려서 가져올 수 있다.
"""
week = ['월','화','수','목','금','토','일']

print(week[3])

print(week[:5])

numbers = [15, 20, 33, 10, 9]
#sum_numbers = numbers[0] * numbers[2] * numbers[4]
sum_numbers = numbers[-5] * numbers[-3] * numbers[-1]
print(sum_numbers)

"""
리스트 안에 요소들의 자료형은 문자, 숫자, 참/거짓,
리스트, 튜플, 딕셔너리 등 여러 종류의 자료형을 저장할 수 있다.

중첩된 리스트의 요소 값을 가져오려면
먼저 리스트의 인덱스로 중첩된 인덱스를 지시하고
중첩된리스트[중첩된 리스트의 인덱값]
"""
data = [1,2,"한국", True, False,["3","4"]]
print(data[5][0])

case1 = ["대한민국입니다", "미국에 어서오세요", ["일본", "중국", "태국입니다."]]  
kor = case1[0][0:4]
print(kor)

usa = case1[1][0:2]
print(usa)

jap = case1[2][0]
print(jap)

china = case1[2][1]
print(china)

tai = case1[2][2][0:2]
print(tai)









