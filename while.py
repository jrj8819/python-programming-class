# Qize) 다음과 같이 딕셔너리를 만들고 값을 수정합시다.
dic = {"안녕하세요":"hello",
       "감사합니다":"thank you",
       "미안합니다":"sorry"}
#print(dic)
#dic["미안합니다"] = "so sorry"
#print(dic)

# 딕셔너리에 값 추가하기
"""
딕셔너리이름[새로 넣을 키] = 새로 넣는 값

키-값 쌍에서 키를 중복 하여 넣으면
이전 키에 대응되는 값을 덮어쓴다.

키-값 쌍에서 값은 중복이 가능하다.
(키로 구분할 수 있기 때문에)
"""
#dic["미안합니다"] = "아주 미안합니다."
#print(dic)

# 키 혹은 값을 따로 얻어오는 함수

"""
키 ) 변수 = 딕셔너리이름.keys()
값 ) 변수 = 딕셔너리이름.values()
쌍 ) 변수 = 딕셔너리이름.items()
"""
k = dic.keys()
#print(k)

v = dic.values()
#print(v)

i = dic.items()
#print(i)

# 딕셔너리를 비우는 함수 clear()

#dic.clear()
#print(dic)

# 값을 가져오는 함수 get()
dic["안녕하세요"]
dic.get("안녕하세요")
"""
get함수는 값을 가져올 수 있다.
키에 맞는 값이 없을 경우 기본값을 설정할 수 있다.
"""
print(dic)
print(dic.get("배고파요", "해당 키에 대한 값이 없습니다.")
)

# 키 값이 있는지 확인하는 키워드 in
"""
딕셔너리 안에 키가 있는지 확인 할 수 있다.

검색할 키 in 딕셔너리 이름

결과는 True 혹은 False 로 나타난다.
"""
print("감사합니다" in dic)


# 집합(SET)
"""
데이터를 저장 할 수 있지만
- 데이터간에 중복이 없고,
- 순서가 없다(인덱스를 쓸 수 없다)

집합은 대괄호({})를 활용하여 만들 수 있다.
"""
l = [1,2,3,1]
print(l)

s = {1,2,3,1}
print(s)

s1 = {2,4,6,8,10}
s2 = {3,6,9,12,15}

# 교집합 구하기
"""
&, intersection()
"""
s3 = s1 & s2
s4 = s1.intersection(s2)
#print(s4)

# 합집합 구하기
"""
|, union()
"""
s3 = s1 | s2
s4 = s1.union(s2)
print(s4)


# 차집합
s1 = {2,4,6,8,10}
s3 = s1 - {8}
s4 = s1.difference({8})
print(s4)

# 집합에 값 추가/삭제하기
"""
한개의 집합 값을 추가하는 add(), 
여러개의 집합 값을 추가하는 update()
특정 값 제거하는 remove()
"""

s1.add(12)
print(s1)

s1.update([14,12,16])
print(s1)

s1.remove(16)
print(s1)

# Quiz
l = ['A','P','P','L','E','S','A','M','S','U','N','G','H','U','A','W','E','I','X','I','A','O','M','I']
print(l)
s = set(l)
print(s - {'A'})


# 제어문 - if문
"""
조건에 따라 프로그램 흐름(실행)을 나눌 때
쓴다.

if 조건:
    참일때 실행하는 부분1
    참일때 실행하는 부분2
else:
    거짓일 때 실행하는 부분1
    거짓일 때 실행하는 부분2
    
if 다음에 실행하는 부분

주의) 참일 때 실행하는 부분은 탭 1번으로 들어쓴다.
"""

num = 1
if num == 2:
    print("20이 크다")
else:
    print("10이 크다")

# Quiz) 사용자로부터 키보드로 숫자를 입력( input() 함수 활용, int() 함수 활용)받고 입력한 숫자와 20을 비교하여 크면 "입력한 숫자가 크다" 메시지 출력 작다면 "입력한 숫자가 작다" 메시지를 출력합니다.

#u_in = int(input())

# 여러개의 조건을 쓰려면 and or를 활용한다.
"""
if u_in == 20 and u_in > 20:
    print("입력한 숫자가 크거나 같다")
else:
    print("입력한 숫자가 작다")
"""
# 조건을 비교할 때 리스트, 튜플, 문자열, 집합
# 딕셔너리 등을 쓸 수 있다.
if 'a' in ('b','c'):
    print("a가 있어요")
else:
    print("a가 없어요")
    
# Quiz) 두 정수를 입력받아 뺄셈한 결과가 
# 0이면 "결과 : 0"
# 양수 이면 "두 수의 차는 양수 : 10(뺀값)"
# 음수 이면 "두 수의 차는 음수 : -10(뺀값)"  
# 를 출력해주세요


num1 = int(input())
num2 = int(input())

#if num1 == num2:
if (num1-num2) == 0:
    print("결과 : 0")
else:
    if (num1-num2) > 0:
        print("두 수의 차는 양수 : %d" % (num1-num2))
    else:
        print("두 수의 차는 음수 : %d" % (num1-num2))


# elif (else if)
"""
if의 조건이 거짓인 후에 다시 다른 조건으로 비교할 때
elif를 쓴다

if 조건1:
    참일때 실행하는 부분1
    참일때 실행하는 부분2
elif 조건2:
    조건1이 거짓이고 조건2가 참일 때 실행하는 부분1
    조건1이 거짓이고 조건2가 참일 때 실행하는 부분2
elif 조건3:
    조건1,2이 거짓이고 조건3가 참일 때 실행하는 부분1
    조건1,2이 거짓이고 조건3가 참일 때 실행하는 부분2
else:
    조건 1,2,3 거짓일 때 실행하는 부분1
    조건 1,2,3 거짓일 때 실행하는 부분2
    
if 다음에 실행하는 부분

"""
if (num1-num2) == 0:
    print("결과 : 0")
elif (num1-num2) > 0:
    print("두 수의 차는 양수 : %d" % (num1-num2))
else:
    print("두 수의 차는 음수 : %d" % (num1-num2))








































































































